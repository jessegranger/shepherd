// Generated by CoffeeScript 1.7.1
(function() {
  var $, Fs, Http, Opts, Shell, log;

  $ = require("bling");

  Shell = require("shelljs");

  Fs = require("fs");

  Opts = require("commander");

  Http = require('http');

	// Make a helper for reading JSON data (through a Promise)
  $.Promise.jsonFile = function(file, p) {
		// Use a default (empty) promise
    if (p == null) p = $.Promise();
		// Set a default error handler
    p.wait(function(err, obj) {
      if (err) {
        return $.log("jsonFile(" + file + ") failed:", err);
      }
    });
		// Read the file
    Fs.readFile(file, function(err, data) {
      if (err) return p.fail(err);
      try {
        return p.finish(JSON.parse(data));
      } catch (_err) {
        return p.fail(_err);
      }
    });
    return p;
  };

  log = $.logger("[shepherd]");

  log("Starting as PID:", process.pid);

  $.Promise.jsonFile("package.json").then(function(pkg) {
    Opts.version(pkg.version).option('-h [file]', "The .herd file to load", ".herd").parse(process.argv);
    return $.Promise.jsonFile(Opts.h).then(function(herd) {
      var children, httpServer, i, launch, _i, _ref, _results;
      log("Starting HTTP server...");
      httpServer = Http.createServer(function(req, res) {
        res.statusCode = 200;
        return res.end("Thanks for coming.");
      });
      httpServer.listen(herd.httpPort, function(err) {
        if (err) {
          log("Error:", err);
          return process.exit(1);
        } else {
          return log("HTTP Server ready for webhooks");
        }
      });
      children = [];
      launch = function(i) {
        var child, cmd_string, port, restartTimeout, start_attempts;
        port = Opts.port + i;
        cmd_string = "PORT=" + port + " " + Opts.command;
        start_attempts = 0;
        restartTimeout = null;
        children.push(child = Shell.exec(cmd_string, {
          silent: true,
          async: true
        }, function(code) {
          var c, j, _i, _len;
          log("Child PID: " + child.pid + " Exited with code: ", code);
          for (j = _i = 0, _len = children.length; _i < _len; j = ++_i) {
            c = children[j];
            if (c.pid === child.pid) {
              children.splice(j, 1);
              break;
            }
          }
          if (code === Opts.restartCode && (++start_attempts) < Opts.maxRestart) {
            launch(i);
          } else if (children.length === 0) {
            log("All children exited gracefully, shutting down (no flock to tend).");
            process.exit(0);
          } else {
            log("Still " + children.length + " children running");
          }
          clearTimeout(restartTimeout);
          return restartTimeout = setTimeout((function() {
            return start_attempts = 0;
          }), Opts.restartTimeout);
        }));
        child.stdout.on("data", $.logger("[child-" + child.pid + "]"));
        return child.stderr.on("data", $.logger("[child-" + child.pid + "(stderr)]"));
      };
      _results = [];
      for (i = _i = 0, _ref = parseInt(Opts.number, 10); _i < _ref; i = _i += 1) {
        _results.push(launch(i));
      }
      return _results;
    });
  });

}).call(this);
